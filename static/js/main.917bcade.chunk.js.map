{"version":3,"sources":["components/Login.tsx","utils/utils.ts","utils/Data.ts","components/Table/Edit/Editing.tsx","components/Table/Add/Adding.tsx","logo.svg","components/Layout/NavBar.tsx","components/Table/BodyTable.tsx","components/Table/Participants.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["schema","yup","shape","email","required","password","Login","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","history","useHistory","React","useState","showPwd","setShowPwd","ShowError","setShowError","className","onSubmit","data","checkData","push","htmlFor","placeholder","type","id","onClick","alert","Data","Editing","props","name","cell","defaultValues","Participant","updatedParticipants","Participants","map","setParticipants","setParticipantEditing","Adding","reset","parseInt","_uniqueId","newParticipant","concat","setParticipant","console","error","NavBar","src","logo","alt","children","BodyTable","deleteParticipant","ParticipantEditing","sorted","setSorted","filter","log","useEffect","json","localStorage","getItem","loadedParticipants","JSON","parse","stringify","setItem","RenderTableHeader","head","key","arrayCopy","sort","a","b","toLocaleLowerCase","compareBy","sortBy","x","NotFound","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.917bcade.chunk.js","sourcesContent":["\nimport React from 'react';\nimport '../App.css';\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from 'react-router';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport checkData from '../utils/utils';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from \"react-icons/ai\";\n\n/**\n * schema for error message if the inputs are wrong in login\n */\nconst schema = yup.object().shape({\n  email: yup.string().required(\"email is required\"),\n  password: yup.string().required(\"password is required\"),\n})\n\ntype Inputs = {\n  email: string,\n  password: string,\n};\n\nexport default function Login() {\n  const { register, handleSubmit, formState: { errors } } = useForm<Inputs>({\n    resolver: yupResolver(schema)\n  });\n  const history = useHistory();\n  const [showPwd, setShowPwd] = React.useState<boolean>(false)\n  const [ShowError, setShowError] = React.useState<boolean>(true)\n\n  /**\n   * onSubmit function()\n   * check data email and password are corrects with checkData() and display error or redirect then\n   * @param data \n   */\n  const onSubmit = (data: any) => {\n    if (checkData(data) === true) {\n      history.push(\"/dig_test/participants\");\n    } else {\n      setShowError(false);\n    }\n  };\n  return (\n    <div className=\"Login\" >\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"log-form container\">\n        <h1>Welcome <br /> Please login</h1>\n        <div>\n          <div>\n            <label htmlFor=\"email\" className=\"label\">Email</label>\n            <input {...register(\"email\")} className=\"inputForm\" placeholder=\"\"\n            />\n            {errors.email ? <p className=\"error\">please enter a valid email</p> : <p className=\"error\"></p>}\n          </div>\n        </div>\n\n        <div>\n          <div>\n            <label htmlFor=\"password\" className=\"label\">Password</label>\n            <input {...register(\"password\", { required: true })} className=\"inputForm\" type={showPwd ? \"text\" : \"password\"} placeholder=\"\" />\n            <span id=\"eyeIcon\" className=\"fa fa-eye\" onClick={() => setShowPwd(!showPwd)}>{!showPwd ? <AiOutlineEyeInvisible /> : <AiOutlineEye />}</span>\n            <span className=\"forgot\" onClick={() => alert(\"email sent\")}>Forgot Username?</span>\n            {errors.password ? <p className=\"error\">This field is required</p> : <p className=\"error\"></p>}\n          </div>\n        </div>\n\n        <button type=\"submit\" className=\"btn\">\n          Login\n          </button>\n        {!ShowError ? <p className=\"error\">Bad credentials</p> : <p className=\"error\"></p>}\n\n      </form>\n\n    </div >\n  );\n}","import { ILogin } from './interfaces'\n\n/**\n * check login ( email and password)\n * it should be from a database\n * it should also limit the amout of the attemps\n * @param data \n * @returns boolean\n */\nexport default function checkData(data: ILogin) {\n  if (data.email !== \"\" && data.password !== \"\")\n    return true;\n  return false;\n}","export const Data = [\n  {\n    \"name\": \"Cristobal Perez\",\n    \"email\": \"cristobal.perez@example.com\",\n    \"cell\": \"638-617-675\",\n    \"id\": 1\n  },\n  {\n    \"name\": \"Malthe Andersen\",\n    \"email\": \"malthe.andersen@example.com\",\n    \"cell\": \"25596760\",\n    \"id\": 2\n  },\n  {\n    \"name\": \"Marie Thomsen\",\n    \"email\": \"marie.thomsen@example.com\",\n    \"cell\": \"23750487\",\n    \"id\": 3\n  },\n  {\n    \"name\": \"Ann Parker\",\n    \"email\": \"ann.parker@example.com\",\n    \"cell\": \"(244)-392-2231\",\n    \"id\": 4\n  },\n  {\n    \"name\": \"Simon Petersen\",\n    \"email\": \"simon.petersen@example.com\",\n    \"cell\": \"09733474\",\n    \"id\": 5\n  },\n  {\n    \"name\": \"Emil Sørensen\",\n    \"email\": \"emil.sorensen@example.com\",\n    \"cell\": \"89794274\",\n    \"id\": 6\n  },\n  {\n    \"name\": \"Aitor Vargas\",\n    \"email\": \"aitor.vargas@example.com\",\n    \"cell\": \"654-676-051\",\n    \"id\": 7\n  },\n  {\n    \"name\": \"Sofia Huhtala\",\n    \"email\": \"sofia.huhtala@example.com\",\n    \"cell\": \"044-985-58-71\",\n    \"id\": 8\n  },\n  {\n    \"name\": \"AlidaEl1\",\n    \"email\": \"alidael1\",\n    \"cell\": \"46263311\",\n    \"id\": 9\n  },\n  {\n    \"name\": \"Julianne Gjønnes\",\n    \"email\": \"julianne.gjonnes@example.com\",\n    \"cell\": \"97250041\",\n    \"id\": 10\n  },\n  {\n    \"name\": \"Murielle Lecomte\",\n    \"email\": \"murielle.lecomte@example.com\",\n    \"cell\": \"077 997 58 69\",\n    \"id\": 11\n  },\n  {\n    \"name\": \"Felix Carr\",\n    \"email\": \"felix.carr@example.com\",\n    \"cell\": \"0739-163-355\",\n    \"id\": 12\n  },\n  {\n    \"name\": \"Leo Hautala\",\n    \"email\": \"leo.hautala@example.com\",\n    \"cell\": \"042-881-70-75\",\n    \"id\": 13\n  },\n  {\n    \"name\": \"Donna Harvey\",\n    \"email\": \"donna.harvey@example.com\",\n    \"cell\": \"0701-171-619\",\n    \"id\": 14\n  },\n  {\n    \"name\": \"Lewis Johnson\",\n    \"email\": \"lewis.johnson@example.com\",\n    \"cell\": \"(085)-864-2358\",\n    \"id\": 15\n  },\n  {\n    \"name\": \"Michael Turner\",\n    \"email\": \"michael.turner@example.com\",\n    \"cell\": \"(468)-342-3774\",\n    \"id\": 16\n  },\n  {\n    \"name\": \"LOL test\",\n    \"email\": \"shyl.mrdy@example.com\",\n    \"cell\": \"0969-470-1212\",\n    \"id\": 17\n  },\n  {\n    \"name\": \"Yildiz der Zwaard\",\n    \"email\": \"yildiz.vanderzwaard@example.com\",\n    \"cell\": \"(495)-732-9803\",\n    \"id\": 18\n  },\n  {\n    \"name\": \"Bartjan der Put\",\n    \"email\": \"bartjan.vanderput@example.com\",\n    \"cell\": \"(785)-673-0619\",\n    \"id\": 19\n  },\n  {\n    \"name\": \"Çetin Aşıkoğlu\",\n    \"email\": \"cetin.asikoglu@example.com\",\n    \"cell\": \"(929)-303-0569\",\n    \"id\": 20\n  }\n]","// import React from 'react'\nimport '../Participants.css';\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { IParticipant } from '../../../utils/interfaces';\n\nexport default function Editing(props: {\n  Participants: IParticipant[],\n  Participant: IParticipant,\n  setParticipants: any,\n  setParticipantEditing: any\n}) {\n  /**\n   * schema for error message if the inputs are wrong in login\n   */\n  const schema = yup.object().shape({\n    name: yup.string().required(\"email is required\"),\n    email: yup.string().required(\"password is required\"),\n    cell: yup.string().required(\"pbone is required\"),\n  })\n\n  type Inputs = {\n    name: string,\n    email: string,\n    cell: string,\n    id: number\n  };\n  const { register, handleSubmit } = useForm<Inputs>({\n    defaultValues: props.Participant,\n    resolver: yupResolver(schema)\n  });\n\n  /**\n   * function submitEdits()\n   * edit a Participant, change particiapn in thel list of Participants\n   * @param Data \n   */\n  function submitEdits(Data: IParticipant) {\n    const updatedParticipants: any = [...props.Participants].map((Participant: any) => {\n      if (Participant.id === Data.id) {\n        Participant.name = Data.name;\n        Participant.email = Data.email;\n        Participant.cell = Data.cell;\n      }\n      return Participant;\n    });\n    props.setParticipants(updatedParticipants);\n    props.setParticipantEditing(null);\n  }\n\n  return (\n    <>\n      <td><input {...register(\"name\")} className=\"myInput cellName\" placeholder=\"Full Name\" /></td>\n      <td><input {...register(\"email\")} className=\"myInput cellEmail\" placeholder=\"Email Address\" /></td>\n      <td><input {...register(\"cell\")} className=\"myInput cellPhone\" placeholder=\"Phone Number\" /></td>\n      <td>\n        <form onSubmit={handleSubmit(submitEdits)} id=\"editParticipant\">\n          <button onClick={() => props.setParticipantEditing(null)} className=\"cancelButton\">CANCEL</button>\n          <button type=\"submit\" className=\"saveButton\">SAVE</button>\n        </form>\n      </td>\n      <td>\n      </td>\n    </>\n  );\n}\n","// import React from 'react'\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { IParticipant } from '../../../utils/interfaces';\nimport _uniqueId from 'lodash/uniqueId';\n\nexport default function Adding(props: { Participants: IParticipant[], setParticipants: any, setParticipant: any }) {\n  /**\n   * schema for error message if the inputs are wrong in login\n   */\n  const schema = yup.object().shape({\n    name: yup.string().required(\"email is required\"),\n    email: yup.string().required(\"password is required\"),\n    cell: yup.string().required(\"pbone is required\"),\n  })\n\n  type Inputs = {\n    name: string,\n    email: string,\n    cell: string,\n  };\n\n  const { register, handleSubmit, reset } = useForm<Inputs>({\n    resolver: yupResolver(schema)\n  });\n\n  /**\n   * function onSubmitNew()\n   * add a new participant at the end of the array of Participants\n   * @param data : Participant(name, email , phone)\n   */\n  function onSubmitNew(data: IParticipant) {\n    if (data.name && data.cell && data.email) {\n      const id: number = parseInt(_uniqueId());\n      const newParticipant: IParticipant = {\n        id: id,\n        name: data.name,\n        email: data.email,\n        cell: data.cell,\n      };\n      props.setParticipants([...props.Participants].concat(newParticipant));\n      props.setParticipant({ name: \"\", email: \"\", cell: \"\", id: id });\n      alert('added New participant');\n      reset({})\n    } else {\n      console.error(\"error Add new participant\")\n    }\n  }\n\n  return (\n    <tr id=\"Adding\">\n      <td><input {...register(\"name\")} className=\"myInput cellName\" placeholder=\"Full Name\" /></td>\n      <td><input {...register(\"email\")} className=\"myInput cellEmail\" placeholder=\"Email Address\" /></td>\n      <td><input {...register(\"cell\")} className=\"myInput cellPhone\" placeholder=\"Phone Number\" /></td>\n      <td>\n        <form onSubmit={handleSubmit(onSubmitNew)}>\n          <button type=\"submit\" className=\"addButton\">Add new</button>\n        </form>\n      </td>\n    </tr>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"../../logo.svg\";\n\nexport default function NavBar(props: any) {\n  return (\n    <div>\n      <nav className=\"navbar navbar-default\">\n        <div className=\"container-fluid\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" id=\"logo\" />          <span className=\"navbar-brand\">\n            Super Software\n          </span>\n        </div>\n      </nav>\n\n      {props.children}\n\n    </div>\n  )\n}\n","import { FaTrash } from \"react-icons/fa\";\nimport { RiPencilFill } from \"react-icons/ri\";\nimport { IParticipant } from \"../../utils/interfaces\";\nexport default function BodyTable(props: { Participant: IParticipant, setParticipantEditing: any, deleteParticipant: any }) {\n  return (\n    <>\n      <td className=\"cellName\">{props.Participant.name}</td>\n      <td className=\"cellEmail\">{props.Participant.email}</td>\n      <td className=\"cellPhone\">{props.Participant.cell}</td>\n      <td className=\"cellAction\">\n        <span className=\"icon-only\">\n          <RiPencilFill className=\"myButton\" onClick={() => props.setParticipantEditing(props.Participant.id)} />\n          <FaTrash className=\"myButton\" onClick={() => props.deleteParticipant(props.Participant.id)} />\n        </span>\n      </td>\n    </>\n  )\n}\n","import React from 'react'\nimport './Participants.css';\nimport { IParticipant } from '../../utils/interfaces';\nimport { Data } from '../../utils/Data'\nimport Editing from './Edit/Editing'\nimport Adding from './Add/Adding'\n// import { FaTrash } from \"react-icons/fa\";\n// import { RiPencilFill } from \"react-icons/ri\";\nimport NavBar from '../Layout/NavBar';\nimport BodyTable from './BodyTable';\n\nexport default function Participants() {\n  const [Participants, setParticipants] = React.useState<any>(Data);\n  const [Participant, setParticipant] = React.useState<IParticipant>();\n  const [ParticipantEditing, setParticipantEditing] = React.useState<any>(null);\n  const [sorted, setSorted] = React.useState<string>();\n\n  /**\n   * getting data from local storage\n   */\n  React.useEffect(() => {\n    const json: any = localStorage.getItem(\"Participants\");\n    const loadedParticipants = JSON.parse(json);\n    if (loadedParticipants) {\n      setParticipants(loadedParticipants);\n    }\n  }, []);\n\n  /**\n   * set data in local storage\n   */\n  React.useEffect(() => {\n    const json = JSON.stringify(Participants);\n    localStorage.setItem(\"Participants\", json);\n  }, [Participants]);\n\n  /**\n   * Function deleteParticipant(id)\n   * delete a Participant accordint the ID\n   * @param id \n   */\n  function deleteParticipant(id: number) {\n    let updatedParticipants: any = [...Participants].filter((Participant: any) => Participant.id !== id);\n    setParticipants(updatedParticipants);\n    console.log(`delete Participant`, Participant)\n    alert('Participant deleted');\n  }\n\n  /**\n   * Component Table Header \n   * @returns Component\n   */\n  const RenderTableHeader = () => {\n    const header: string[] = [\"name\", \"email\", \"cell\", \"\"];\n\n    function compareBy(key: any) {\n      return function (a: string, b: string) {\n        if (a[key].toLocaleLowerCase() < b[key].toLocaleLowerCase()) return -1;\n        if (a[key].toLocaleLowerCase() > b[key].toLocaleLowerCase()) return 1;\n        return 0;\n      };\n    }\n\n    function sortBy(key: any) {\n      setSorted(key)\n      let arrayCopy: any = [...Participants];\n      arrayCopy.sort(compareBy(key));\n      setParticipants(arrayCopy);\n    }\n    return (\n      <tr>\n        {header.map((head: string) => {\n          return (\n            <th key={head} onClick={() => sortBy(head)}>\n              {head}{(sorted === head && head !== \"\") && (<>↓</>)}\n            </th>\n          )\n        })}\n      </tr>\n    )\n  }\n\n  return (\n    <NavBar>\n      <div className=\"page\">\n        <div id=\"Participant-list\">\n          <div className='content tableContainer'>\n\n            <h1>List of participants</h1>\n            {/* Component Add a new participant */}\n            <Adding Participants={Participants}\n              setParticipants={(Participants: IParticipant[]) => setParticipants(Participants)}\n              setParticipant={(Participant: IParticipant) => setParticipant(Participant)}\n            />\n\n            <div id=\"participantTable\">\n              <div>\n                <table>\n                  <thead>\n                    {/* Component header of the table */}\n                    <RenderTableHeader />\n                  </thead>\n                  <tbody >\n                    {Participants.map((Participant: IParticipant) => (\n                      <tr key={Participant.id} >\n                        {Participant.id === ParticipantEditing ? (\n                          //  Component Edit a participant of the table \n                          <Editing Participants={Participants}\n                            Participant={Participant}\n                            setParticipants={(Participants: IParticipant[]) => setParticipants(Participants)}\n                            setParticipantEditing={(x: any) => setParticipantEditing(x)} />\n                        ) : (\n                          //  Component body of the table participants  \n                          <BodyTable Participant={Participant}\n                            setParticipantEditing={(id: number) => setParticipantEditing(id)}\n                            deleteParticipant={(id: number) => deleteParticipant(id)}\n                          />\n                        )}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div >\n    </NavBar>\n  );\n}\n","// import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './components/Login';\nimport Participants from './components/Table/Participants';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/dig_test/\" component={Login} />\n        <Route path=\"/dig_test/participants\" component={Participants} />\n        <Route path={'*'} ><NotFound /></Route>\n      </Switch>\n    </Router>\n  );\n}\nfunction NotFound() {\n  return (\n    <h1>Page Not Found</h1>\n  )\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}